!function(){"use strict";const e={inputSelector:".modal__form-input",submitButtonSelector:".modal__button",inactiveButtonClass:"modal__button_disabled",inputErrorClass:"modal__form-input-error",errorClass:"modal__form-input-error_active"};class t{constructor(e,t){this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._form=t,this._inputEls=[...this._form.querySelectorAll(this._inputSelector)],this._submitButton=this._form.querySelector(this._submitButtonSelector)}_showInputError(e){const t=this._form.querySelector(`.${e.id}-error`);t.textContent=e.validationMessage,t.classList.add(this._errorClass)}_hideInputError(e,t){const s=this._form.querySelector(`.${e.id}-error`);s.textContent="",s.classList.remove(this._errorClass)}_checkInputValidity(e){if(!e.validity.valid)return this._showInputError(e);this._hideInputError(e)}_hasInvalidInput(){return!this._inputEls.every((e=>e.validity.valid))}_toggleButtonState(){this._hasInvalidInput()?this.disableSubmitButton():this.enableSubmitButton()}_setEventListeners(){this._inputEls.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this._toggleButtonState()}))}))}enableSubmitButton(){this._submitButton.classList.remove(this._inactiveButtonClass),this._submitButton.disabled=!1}disableSubmitButton(){this._submitButton.classList.add(this._inactiveButtonClass),this._submitButton.disabled=!0}resetValidation(){this._toggleButtonState(),this._inputEls.forEach((e=>{this._hideInputError(e)}))}enableValidation(){this._form.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}}class s{constructor(e,t,s,n){let{name:i,link:r,_id:o,isLiked:a}=e;this._name=i,this._link=r,this._id=o,this._likeStatus=a,this._cardSelector=t,this._handleImageClick=s,this._handleDeleteCard=n;const l=document.querySelector(this._cardSelector).content.querySelector(".card");this._cardElement=l.cloneNode(!0),this._heartButton=this._cardElement.querySelector(".card__heart-button"),this._deleteButton=this._cardElement.querySelector(".card__delete-button"),this._cardImage=this._cardElement.querySelector(".card__image"),this._cardTitle=this._cardElement.querySelector(".card__title")}_handleLikeIcons(){this._heartButton.classList.toggle("card__heart-button-active")}_setEventListeners(){this._heartButton.addEventListener("click",(()=>{this._handleLikeIcons()})),this._deleteButton.addEventListener("click",this._handleDeleteCard),this._cardImage.addEventListener("click",(()=>{this._handleImageClick({name:this._name,link:this._link})}))}getView(){return this._cardTitle.textContent=this._name,this._cardImage.src=this._link,this._cardImage.alt=this._name,this._setEventListeners(),this._cardElement}}class n{constructor(e){this._modalElement=document.querySelector(e),this._closeButton=this._modalElement.querySelector(".modal__close"),this._handleEscClose=this._handleEscClose.bind(this)}open(){this._modalElement.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEscClose)}close(){this._modalElement.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleEscClose)}_handleEscClose(e){"Escape"===e.key&&this.close()}setEventListeners(){this._closeButton.addEventListener("click",(()=>{this.close()})),this._modalElement.addEventListener("click",(e=>{e.target===e.currentTarget&&this.close()}))}}class i extends n{constructor(e,t){super(e),this._modalForm=this._modalElement.querySelector(".modal__form"),this._handleFormSubmit=t,this._inputList=this._modalForm.querySelectorAll(".modal__form-input"),this._button=this._modalForm.querySelector(".modal__button"),this._buttonText=this._button.textContent}_getInputValues(){return this._inputData={},this._inputList.forEach((e=>{this._inputData[e.name]=e.value})),this._inputData}setSaving(e){this._button.textContent=e?"Saving...":this._buttonText}setEventListeners(){this._modalForm.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit(this._getInputValues())})),super.setEventListeners()}}document.querySelector(".cards__list");const r=document.querySelector("#profile-modal"),o=document.forms["edit-profile-form"],a=document.querySelector("#add-card-modal"),l=document.forms["add-card-form"],c=document.forms["avatar-form"],d=(document.querySelector("#avatar-modal"),document.querySelector(".profile__add-button")),h=(a.querySelector(".modal__button"),document.querySelector(".profile__edit-button")),u=(r.querySelector(".modal__button"),c.querySelector(".modal__button")),_=document.querySelector(".profile__avatar"),m=document.querySelector(".profile__title"),p=document.querySelector(".profile__description"),E=document.querySelector(".profile__avatar"),v=r.querySelector("#profile-title-input"),f=r.querySelector("#profile-description-input"),b=new class{constructor(e){this._baseUrl=e.baseUrl,this._headers=e.headers}getUserInfo(){return fetch(`${this._baseUrl}/users/me`,{headers:this._headers}).then(this._checkResponse).then((e=>e))}editUserInfo(e,t){return fetch(`${this._baseUrl}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify({name:e,about:t})}).then(this._checkResponse).then((e=>e))}editUserAvatar(e){return fetch(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e})}).then(this._checkResponse).then((e=>e))}getInitialCards(){return fetch(`${this._baseUrl}/cards`,{headers:this._headers}).then(this._checkResponse).then((e=>e))}addNewCard(e){return fetch(`${this._baseUrl}/cards`,{method:"POST",headers:this._headers,body:JSON.stringify({name:e.title,link:e.link})}).then(this._checkResponse).then((e=>e))}deleteCard(e){return fetch(`${this._baseUrl}/cards/${e}`,{method:"DELETE",headers:this._headers}).then(this._checkResponse).then((e=>e))}likeCard(e){return fetch(`${this._baseUrl}/cards/${e}/likes`,{method:"PUT",headers:this._headers}).then(this._checkResponse).then((e=>e))}dislikeCard(e){return fetch(`${this._baseUrl}/cards/${e}/likes`,{method:"DELETE",headers:this._headers}).then(this._checkResponse).then((e=>e))}getInitialData(){return Promise.all([this.getUserInfo(),this.getInitialCards()])}_checkResponse(e){return e.ok?e.json():Promise.reject(`Error: ${e.status}`)}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"71ef8ca1-b8c8-47e5-8d73-d71542ab18e9","Content-Type":"application/json"}}),S=new class{constructor(e,t){let{items:s,renderer:n}=e;this._items=s,this._renderer=n,this._container=document.querySelector(t)}renderItems(){this._items.forEach((e=>{this._renderer(e)}))}addItem(e){this._container.prepend(e)}}({items:[{name:"Yosemite Valley",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/yosemite.jpg"},{name:"Lake Louise",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/lake-louise.jpg"},{name:"Bald Mountains",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/bald-mountains.jpg"},{name:"Latemar",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/latemar.jpg"},{name:"Vanoise National Park",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/vanoise.jpg"},{name:"Lago di Braies",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/lago.jpg"}],renderer:g},".cards__list");function g(e){const t=new s(n=e,"#card-template",k,(()=>{j.open(),console.log(n)})).getView();var n;S.addItem(t)}function k(e){q.open(e)}function y(){return b.getUserInfo().then((e=>{L.setUserInfo(e.name,e.about,e.avatar)}))}S.renderItems(),y();const L=new class{constructor(e,t,s){this._titleElement=e,this._descriptionElement=t,this._avatarElement=s}getUserInfo(){return{title:this._titleElement.textContent,description:this._descriptionElement.textContent}}setUserInfo(e,t,s){this._avatarElement.src=s,this._titleElement.textContent=e,this._descriptionElement.textContent=t}}(m,p,E);_.addEventListener("click",(()=>{x.open()})),h.addEventListener("click",(()=>{const e=L.getUserInfo();v.value=e.title,f.value=e.description,I.resetValidation(),U.open()})),d.addEventListener("click",(()=>{B.open()}));const C=new t(e,l),I=new t(e,o),w=new t(e,c);C.enableValidation(),I.enableValidation(),w.enableValidation();const q=new class extends n{constructor(e){super(e),this._imageEl=this._modalElement.querySelector(".modal__image"),this._titleEl=this._modalElement.querySelector(".modal__image-title")}open(e){this._imageEl.src=e.link,this._imageEl.alt=e.name,this._titleEl.textContent=e.name,super.open()}}("#image-modal");q.setEventListeners();const B=new i("#add-card-modal",(function(e){const t={name:e.title,link:e["Image URL"]};B.setSaving(!0),g(t),B.close(),l.reset(),C.disableSubmitButton(),B.setSaving(!1)}));B.setEventListeners();const U=new i("#profile-modal",(function(e){U.setSaving(!0);const t=e.title,s=e.description;b.editUserInfo(t,s).then((()=>{y(),U.close(),U.setSaving(!1)}))}));U.setEventListeners();const j=new class extends n{constructor(e,t){super(e),this._modalForm=this._modalElement.querySelector(".modal__form"),this._handleFormSubmit=t}setEventListeners(){this._modalForm.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit(this._getInputValues())})),super.setEventListeners()}}("#delete-card-modal",(function(e){}));j.setEventListeners();const x=new i("#avatar-modal",(function(e){if(!u.disabled){x.setSaving(!0);const t=e["avatar URL"];b.editUserAvatar(t).then((()=>{y(),x.close(),x.setSaving(!1),c.reset(),w.disableSubmitButton()}))}}));x.setEventListeners()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,